"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Windows –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import os
import asyncio
import uuid
import time
import tempfile
import re
from io import BytesIO
from pathlib import Path
from typing import Dict, List, Optional
import unicodedata

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, Response
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import cv2
import numpy as np
from PIL import Image

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
from cluster_simple_windows import build_plan_simple, distribute_to_folders, process_group_folder, IMG_EXTS

app = FastAPI(title="–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ª–∏—Ü", description="API –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_state = {
    "queue": [],
    "current_tasks": {},
    "results": {}
}

class QueueItem(BaseModel):
    path: str
    includeExcluded: bool = False

class TaskStatus(BaseModel):
    task_id: str
    status: str
    progress: int
    message: str
    result: Optional[Dict] = None
    error: Optional[str] = None

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return HTMLResponse(content=open("static/index.html", "r", encoding="utf-8").read())

@app.get("/api/drives")
async def get_drives():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤ –¥–ª—è Windows."""
    drives = []
    # –î–ª—è Windows
    for i in range(ord('C'), ord('Z') + 1):
        drive = f"{chr(i)}:\\"
        if os.path.exists(drive):
            drives.append({"name": drive, "path": drive})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∏ –î–æ–∫—É–º–µ–Ω—Ç—ã
    desktop_path = Path(os.path.join(os.path.expanduser("~"), "Desktop"))
    documents_path = Path(os.path.join(os.path.expanduser("~"), "Documents"))
    
    if desktop_path.exists():
        drives.insert(0, {"name": "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª", "path": str(desktop_path)})
    if documents_path.exists():
        drives.insert(0, {"name": "–î–æ–∫—É–º–µ–Ω—Ç—ã", "path": str(documents_path)})

    return {"drives": drives}

@app.get("/api/folder")
async def get_folder_contents(path: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ (–ø–æ–¥–ø–∞–ø–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
    try:
        decoded_path = path.replace('%20', ' ')
        folder_path = Path(decoded_path)

        if not folder_path.exists() or not folder_path.is_dir():
            raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        folders = []
        images = []
        for item in folder_path.iterdir():
            if item.is_dir():
                folders.append({"name": item.name, "path": str(item)})
            elif item.is_file() and item.suffix.lower() in IMG_EXTS:
                images.append({"name": item.name, "path": str(item)})
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        contents = []
        for f in folders:
            contents.append({"name": f["name"], "path": f["path"], "is_directory": True})
        for i in images:
            contents.append({"name": i["name"], "path": i["path"], "is_directory": False})

        return {
            "path": str(folder_path),
            "folders": folders,
            "images": images,
            "contents": contents
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ {path}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")

@app.get("/api/image/preview")
async def get_image_preview(path: str, size: int = 150):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        decoded_path = path.replace('%20', ' ')
        image_path = Path(decoded_path)
        
        if not image_path.exists() or not image_path.is_file():
            raise HTTPException(status_code=404, detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        if image_path.suffix.lower() not in IMG_EXTS:
            raise HTTPException(status_code=400, detail="–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        img = cv2.imread(str(image_path))
        if img is None:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        height, width = img.shape[:2]
        if width > height:
            new_width = size
            new_height = int(height * size / width)
        else:
            new_height = size
            new_width = int(width * size / height)
        
        resized = cv2.resize(img, (new_width, new_height))
        
        rgb_img = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)
        pil_img = Image.fromarray(rgb_img)
        
        img_bytes = BytesIO()
        pil_img.save(img_bytes, format='JPEG', quality=85)
        img_bytes.seek(0)
        
        return Response(
            content=img_bytes.getvalue(),
            media_type="image/jpeg",
            headers={"Cache-Control": "public, max-age=3600"}
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é –¥–ª—è {path}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/queue/add")
async def add_to_queue(request: QueueItem):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É."""
    try:
        folder_path = Path(request.path)
        if not folder_path.exists() or not folder_path.is_dir():
            raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if request.path not in app_state["queue"]:
            app_state["queue"].append(request.path)
            return {"message": f"–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {request.path}"}
        return {"message": f"–ü–∞–ø–∫–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: {request.path}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/queue")
async def get_queue():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    return {"queue": app_state["queue"]}

@app.get("/api/tasks", response_model=List[TaskStatus])
async def get_tasks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    return list(app_state["current_tasks"].values())

async def process_folder_task(task_id: str, folder_path: str, include_excluded: bool):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏."""
    app_state["current_tasks"][task_id] = {
        "task_id": task_id,
        "status": "running",
        "progress": 0,
        "message": "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        "result": None
    }

    def progress_callback(progress: float, message: str):
        if isinstance(progress, (int, float)):
            app_state["current_tasks"][task_id]["progress"] = int(progress)
        app_state["current_tasks"][task_id]["message"] = message
        print(f"üìä [TASK] {message}")

    try:
        print(f"üöÄ [TASK] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: {folder_path}")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        normalized_path = unicodedata.normalize('NFKC', folder_path)
        normalized_path = normalized_path.replace('\u00A0', ' ').replace('\xa0', ' ')
        
        path = Path(normalized_path)

        if not path.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")

        # –®–∞–≥ 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        progress_callback(0, "üîç –ü–æ–∏—Å–∫ –ª–∏—Ü –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º build_plan_simple
        plan = build_plan_simple(path, n_clusters=8, progress_callback=progress_callback)

        if not isinstance(plan, dict) or not plan.get("cluster_map"):
            app_state["current_tasks"][task_id]["status"] = "completed"
            app_state["current_tasks"][task_id]["progress"] = 100
            app_state["current_tasks"][task_id]["message"] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ."
            print(f"‚ö†Ô∏è [TASK] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {folder_path}")
            return

        progress_callback(80, f"‚úÖ –ì–æ—Ç–æ–≤–æ! {len(plan['cluster_map'])} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

        # –®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
        progress_callback(85, "üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º...")
        moved_count, copied_count, total_clusters = distribute_to_folders(plan, path, 1, progress_callback)

        app_state["current_tasks"][task_id]["status"] = "completed"
        app_state["current_tasks"][task_id]["progress"] = 100
        app_state["current_tasks"][task_id]["message"] = f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved_count}, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied_count}"
        app_state["current_tasks"][task_id]["result"] = {
            "moved": moved_count,
            "copied": copied_count,
            "clusters": total_clusters
        }
        print(f"‚úÖ [TASK] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {folder_path}")

    except Exception as e:
        print(f"‚ùå [TASK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {folder_path}: {e}")
        app_state["current_tasks"][task_id]["status"] = "error"
        app_state["current_tasks"][task_id]["error"] = str(e)
        app_state["current_tasks"][task_id]["message"] = f"–û—à–∏–±–∫–∞: {e}"

    finally:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
        if folder_path in app_state["queue"]:
            app_state["queue"].remove(folder_path)

@app.post("/api/process")
async def process_queue(background_tasks: BackgroundTasks, includeExcluded: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    if not app_state["queue"]:
        raise HTTPException(status_code=400, detail="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

    task_ids = []
    for folder_path in app_state["queue"]:
        task_id = str(uuid.uuid4())
        task_ids.append(task_id)
        background_tasks.add_task(process_folder_task, task_id, folder_path, includeExcluded)
    
    return {"message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", "task_ids": task_ids}

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Windows...")
    print("üìç –û—Ç–∫—Ä—ã—Ç—å: http://localhost:8000")
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
