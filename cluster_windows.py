"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è cluster.py –¥–ª—è Windows
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç MediaPipe –≤–º–µ—Å—Ç–æ face_recognition –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import os
import cv2
import numpy as np
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import json
import shutil
from sklearn.cluster import DBSCAN
from sklearn.metrics.pairwise import cosine_similarity
import mediapipe as mp
from PIL import Image
import warnings
warnings.filterwarnings('ignore')

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMG_EXTS = {'.jpg', '.jpeg', '.png', '.bmp', '.tif', '.tiff', '.webp'}

class MediaPipeFaceDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ MediaPipe"""
    
    def __init__(self):
        self.mp_face_detection = mp.solutions.face_detection
        self.mp_face_mesh = mp.solutions.face_mesh
        self.mp_drawing = mp.solutions.drawing_utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü
        self.face_detection = self.mp_face_detection.FaceDetection(
            model_selection=1,  # 0 –¥–ª—è –±–ª–∏–∂–Ω–∏—Ö –ª–∏—Ü, 1 –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö
            min_detection_confidence=0.5
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mesh –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.face_mesh = self.mp_face_mesh.FaceMesh(
            static_image_mode=True,
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5
        )
    
    def detect_faces(self, image: np.ndarray) -> List[Dict]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = self.face_detection.process(rgb_image)
        
        faces = []
        if results.detections:
            h, w, _ = image.shape
            for detection in results.detections:
                bbox = detection.location_data.relative_bounding_box
                x = int(bbox.xmin * w)
                y = int(bbox.ymin * h)
                width = int(bbox.width * w)
                height = int(bbox.height * h)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                x = max(0, x)
                y = max(0, y)
                width = min(width, w - x)
                height = min(height, h - y)
                
                if width > 0 and height > 0:
                    faces.append({
                        'bbox': (x, y, width, height),
                        'confidence': detection.score[0],
                        'landmarks': None
                    })
        
        return faces
    
    def extract_landmarks(self, image: np.ndarray, face_bbox: Tuple) -> Optional[np.ndarray]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –ª–∏—Ü–∞"""
        x, y, w, h = face_bbox
        face_crop = image[y:y+h, x:x+w]
        
        if face_crop.size == 0:
            return None
            
        rgb_face = cv2.cvtColor(face_crop, cv2.COLOR_BGR2RGB)
        results = self.face_mesh.process(rgb_face)
        
        if results.multi_face_landmarks:
            landmarks = results.multi_face_landmarks[0]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
            points = []
            for landmark in landmarks.landmark:
                points.extend([landmark.x, landmark.y, landmark.z])
            return np.array(points)
        
        return None
    
    def get_face_embedding(self, image: np.ndarray, face_bbox: Tuple) -> Optional[np.ndarray]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –ª–∏—Ü–∞"""
        landmarks = self.extract_landmarks(image, face_bbox)
        if landmarks is not None:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º landmarks
            landmarks = landmarks.reshape(-1, 3)
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ª–∏—Ü–∞
            center = np.mean(landmarks, axis=0)
            landmarks = landmarks - center
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –º–∞—Å—à—Ç–∞–±—É
            scale = np.std(landmarks)
            if scale > 0:
                landmarks = landmarks / scale
            return landmarks.flatten()
        return None

def process_image_windows(image_path: Path, detector: MediaPipeFaceDetector) -> List[Dict]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Windows"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(str(image_path))
        if image is None:
            return []
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü
        faces = detector.detect_faces(image)
        
        results = []
        for i, face in enumerate(faces):
            if face['confidence'] > 0.5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                embedding = detector.get_face_embedding(image, face['bbox'])
                if embedding is not None:
                    results.append({
                        'file_path': str(image_path),
                        'face_id': i,
                        'bbox': face['bbox'],
                        'confidence': face['confidence'],
                        'embedding': embedding
                    })
        
        return results
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {e}")
        return []

def build_plan_windows(input_dir: Path, include_excluded: bool = False) -> Dict[str, Any]:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Windows"""
    print(f"üîç build_plan_windows: input_dir={input_dir}, include_excluded={include_excluded}")
    
    # –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
    excluded_names = ["–æ–±—â–∏–µ", "–æ–±—â–∞—è", "common", "shared", "–≤—Å–µ", "all", "mixed", "—Å–º–µ—à–∞–Ω–Ω—ã–µ"]
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files = []
    for ext in IMG_EXTS:
        image_files.extend(input_dir.rglob(f"*{ext}"))
        image_files.extend(input_dir.rglob(f"*{ext.upper()}"))
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = MediaPipeFaceDetector()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    all_faces = []
    processed_count = 0
    
    for img_path in image_files:
        if not include_excluded:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            path_str = str(img_path).lower()
            if any(excluded_name in path_str for excluded_name in excluded_names):
                continue
        
        faces = process_image_windows(img_path, detector)
        all_faces.extend(faces)
        processed_count += 1
        
        if processed_count % 10 == 0:
            print(f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_faces)} –ª–∏—Ü")
    
    if len(all_faces) < 2:
        return {
            "clusters": {},
            "unreadable": [],
            "no_faces": [f["file_path"] for f in all_faces]
        }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    embeddings = []
    face_to_embedding = {}
    
    for face in all_faces:
        embedding = face['embedding']
        if embedding is not None and len(embedding) > 0:
            embeddings.append(embedding)
            face_to_embedding[id(face)] = len(embeddings) - 1
    
    if len(embeddings) < 2:
        return {
            "clusters": {},
            "unreadable": [],
            "no_faces": [f["file_path"] for f in all_faces]
        }
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    embeddings = np.array(embeddings)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DBSCAN –≤–º–µ—Å—Ç–æ HDBSCAN –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    clustering = DBSCAN(eps=0.3, min_samples=2, metric='cosine')
    cluster_labels = clustering.fit_predict(embeddings)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    clusters = {}
    for i, face in enumerate(all_faces):
        if id(face) in face_to_embedding:
            embedding_idx = face_to_embedding[id(face)]
            cluster_id = cluster_labels[embedding_idx]
            
            if cluster_id == -1:  # –®—É–º
                continue
                
            if cluster_id not in clusters:
                clusters[cluster_id] = []
            clusters[cluster_id].append(face)
    
    print(f"üîç –°–æ–∑–¥–∞–Ω–æ {len(clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    
    return {
        "clusters": clusters,
        "unreadable": [],
        "no_faces": []
    }

def distribute_to_folders_windows(plan: Dict[str, Any], base_path: Path) -> Tuple[int, int, int]:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º –¥–ª—è Windows"""
    moved = 0
    copied = 0
    next_cluster_id = 1
    
    for cluster_id, faces in plan["clusters"].items():
        if len(faces) < 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
            continue
            
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        cluster_folder = base_path / f"cluster_{next_cluster_id}"
        cluster_folder.mkdir(exist_ok=True)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç—è–º
        files_in_cluster = {}
        for face in faces:
            file_path = Path(face['file_path'])
            if file_path not in files_in_cluster:
                files_in_cluster[file_path] = []
            files_in_cluster[file_path].append(face)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for file_path, faces_in_file in files_in_cluster.items():
            if len(files_in_cluster) == 1:
                # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º
                dest_path = cluster_folder / file_path.name
                shutil.move(str(file_path), str(dest_path))
                moved += 1
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ - –∫–æ–ø–∏—Ä—É–µ–º
                dest_path = cluster_folder / file_path.name
                shutil.copy2(str(file_path), str(dest_path))
                copied += 1
        
        next_cluster_id += 1
    
    return moved, copied, next_cluster_id

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
def build_plan_live(input_dir: Path, include_excluded: bool = False, progress_callback=None) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    if progress_callback:
        progress_callback("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...", 10)
    
    plan = build_plan_windows(input_dir, include_excluded)
    
    if progress_callback:
        progress_callback("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 90)
    
    return plan

def distribute_to_folders(plan: Dict[str, Any], base_path: Path, progress_callback=None) -> Tuple[int, int, int]:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º"""
    if progress_callback:
        progress_callback("–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º...", 95)
    
    return distribute_to_folders_windows(plan, base_path)

def process_group_folder(input_dir: Path, progress_callback=None, include_excluded: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –ø–∞–ø–æ–∫"""
    if progress_callback:
        progress_callback("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø–∞–ø–æ–∫...", 5)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    subdirs = []
    for item in input_dir.iterdir():
        if item.is_dir() and not any(excluded_name in str(item).lower() 
                                   for excluded_name in ["–æ–±—â–∏–µ", "–æ–±—â–∞—è", "common", "shared", "–≤—Å–µ", "all", "mixed", "—Å–º–µ—à–∞–Ω–Ω—ã–µ"]):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∞–ø–∫–µ
            has_images = any(f.suffix.lower() in IMG_EXTS for f in item.rglob("*") if f.is_file())
            if has_images:
                subdirs.append(item)
    
    if progress_callback:
        progress_callback(f"–ù–∞–π–¥–µ–Ω–æ {len(subdirs)} –ø–æ–¥–ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 10)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∞–ø–∫—É
    for i, subdir in enumerate(subdirs):
        if progress_callback:
            progress_callback(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {subdir.name}", 10 + (i * 80 // len(subdirs)))
        
        plan = build_plan_windows(subdir, include_excluded)
        moved, copied, _ = distribute_to_folders_windows(plan, subdir)
        
        if progress_callback:
            progress_callback(f"–ü–∞–ø–∫–∞ {subdir.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {moved} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ, {copied} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", 
                            10 + ((i + 1) * 80 // len(subdirs)))
    
    if progress_callback:
        progress_callback("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 100)
