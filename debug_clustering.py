#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–∞–ø–∫–∏ —Å –ª—é–¥—å–º–∏
"""

import sys
from pathlib import Path
import cv2
import numpy as np
import face_recognition
from cluster import build_plan_live, distribute_to_folders, IMG_EXTS

def check_images_in_folder(folder_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ"""
    folder = Path(folder_path)
    if not folder.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder}")
        return False
    
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É: {folder}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = []
    for ext in IMG_EXTS:
        images.extend(folder.rglob(f"*{ext}"))
        images.extend(folder.rglob(f"*{ext.upper()}"))
    
    print(f"üñº –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
    
    if len(images) == 0:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    faces_found = 0
    for i, img_path in enumerate(images[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {img_path.name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(str(img_path))
            if image is None:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è face_recognition
            rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # –ò—â–µ–º –ª–∏—Ü–∞
            face_locations = face_recognition.face_locations(rgb_image)
            face_encodings = face_recognition.face_encodings(rgb_image, face_locations)
            
            print(f"   üë§ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {len(face_locations)}")
            print(f"   üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {len(face_encodings)}")
            
            if len(face_encodings) > 0:
                faces_found += 1
                print(f"   ‚úÖ –õ–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            else:
                print(f"   ‚ùå –õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {faces_found}/{min(5, len(images))} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏—Ü–∞")
    return faces_found > 0

def test_clustering(folder_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {folder_path}")
    
    try:
        # –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        print("üìã –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
        plan = build_plan_live(Path(folder_path))
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∞:")
        print(f"   - –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(plan.get('clusters', {}))}")
        print(f"   - –§–∞–π–ª–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(plan.get('plan', []))}")
        print(f"   - –ù–µ—á–∏—Ç–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(plan.get('unreadable', []))}")
        print(f"   - –§–∞–π–ª–æ–≤ –±–µ–∑ –ª–∏—Ü: {len(plan.get('no_faces', []))}")
        
        if len(plan.get('clusters', {})) == 0:
            print("‚ùå –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Ü –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
            print("   - –õ–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –ª–∏—Ü")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        clusters = plan.get('clusters', {})
        for cluster_id, files in clusters.items():
            print(f"   üìÅ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            for file_path in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                print(f"      - {Path(file_path).name}")
            if len(files) > 3:
                print(f"      ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_distribution(folder_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è: {folder_path}")
    
    try:
        # –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω
        plan = build_plan_live(Path(folder_path))
        
        if len(plan.get('clusters', {})) == 0:
            print("‚ùå –ù–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
        print("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...")
        
        plan_items = plan.get('plan', [])
        used_clusters = sorted({c for item in plan_items for c in item["cluster"]})
        cluster_id_map = {old: 1 + idx for idx, old in enumerate(used_clusters)}
        
        print(f"üìä –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: {len(used_clusters)}")
        for old_id, new_id in cluster_id_map.items():
            cluster_files = [item for item in plan_items if old_id in item["cluster"]]
            print(f"   üìÅ –ü–∞–ø–∫–∞ {new_id}: {len(cluster_files)} —Ñ–∞–π–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python debug_clustering.py <–ø—É—Ç—å_–∫_–ø–∞–ø–∫–µ>")
        print("–ü—Ä–∏–º–µ—Ä: python debug_clustering.py /path/to/photos")
        sys.exit(1)
    
    folder_path = sys.argv[1]
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    if not check_images_in_folder(folder_path):
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–∏—Ü–∞–º–∏")
        sys.exit(1)
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
    if not test_clustering(folder_path):
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        sys.exit(1)
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
    if not test_distribution(folder_path):
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        sys.exit(1)
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
    print("   - –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
