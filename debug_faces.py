#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –ª–∏—Ü
"""

import cv2
import numpy as np
import face_recognition
from pathlib import Path

def test_face_recognition():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü...")
    
    test_folder = Path("test_photos")
    
    if not test_folder.exists():
        print("‚ùå –ü–∞–ø–∫–∞ test_photos –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files = []
    for ext in ['.jpg', '.jpeg', '.png', '.bmp']:
        image_files.extend(test_folder.glob(f"*{ext}"))
        image_files.extend(test_folder.glob(f"*{ext.upper()}"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    
    if len(image_files) == 0:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    total_faces = 0
    processed_images = 0
    
    for img_path in image_files:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {img_path.name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = face_recognition.load_image_file(str(img_path))
            print(f"   üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
            
            # –ò—â–µ–º –ª–∏—Ü–∞
            face_locations = face_recognition.face_locations(image, model="cnn")
            print(f"   üë§ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {len(face_locations)}")
            
            if len(face_locations) > 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
                face_encodings = face_recognition.face_encodings(image, face_locations, model="large")
                print(f"   üß† –ò–∑–≤–ª–µ—á–µ–Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {len(face_encodings)}")
                
                total_faces += len(face_encodings)
                processed_images += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏—Ü
                for i, (top, right, bottom, left) in enumerate(face_locations):
                    print(f"      –õ–∏—Ü–æ {i+1}: ({left}, {top}) - ({right}, {bottom})")
            else:
                print(f"   ‚ùå –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {processed_images}/{len(image_files)}")
    print(f"   üë§ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {total_faces}")
    
    if total_faces == 0:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏—Ü")
        print("   - –õ–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ")
        print("   - –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π face_recognition")
    elif total_faces < 2:
        print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Ü –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏!")
        print("üí° –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ª–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    else:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Ü –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {total_faces}")

def test_opencv():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenCV –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenCV...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å–∫–∞–¥ –•–∞–∞—Ä–∞
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    test_folder = Path("test_photos")
    image_files = list(test_folder.glob("*.png")) + list(test_folder.glob("*.jpg"))
    
    for img_path in image_files[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2
        print(f"\nüîç OpenCV –∞–Ω–∞–ª–∏–∑: {img_path.name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = cv2.imread(str(img_path))
            if img is None:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.1, 4)
            
            print(f"   üë§ OpenCV –Ω–∞—à–µ–ª –ª–∏—Ü: {len(faces)}")
            
            for i, (x, y, w, h) in enumerate(faces):
                print(f"      –õ–∏—Ü–æ {i+1}: ({x}, {y}) —Ä–∞–∑–º–µ—Ä {w}x{h}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ OpenCV: {e}")

if __name__ == "__main__":
    test_face_recognition()
    test_opencv()
