#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
"""

import sys
from pathlib import Path
from cluster_improved import build_plan_live, distribute_to_folders

def test_simple_clustering(folder_path):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {folder_path}")
    
    try:
        # –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω
        print("üìã –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
        plan = build_plan_live(Path(folder_path))
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∞:")
        print(f"   - –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(plan.get('clusters', {}))}")
        print(f"   - –§–∞–π–ª–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(plan.get('plan', []))}")
        print(f"   - –ù–µ—á–∏—Ç–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(plan.get('unreadable', []))}")
        print(f"   - –§–∞–π–ª–æ–≤ –±–µ–∑ –ª–∏—Ü: {len(plan.get('no_faces', []))}")
        
        if len(plan.get('clusters', {})) == 0:
            print("‚ùå –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Ü –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
            print("   - –õ–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –ª–∏—Ü")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        clusters = plan.get('clusters', {})
        for cluster_id, files in clusters.items():
            print(f"   üìÅ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            for file_path in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                print(f"      - {Path(file_path).name}")
            if len(files) > 3:
                print(f"      ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...")
        
        plan_items = plan.get('plan', [])
        used_clusters = sorted({c for item in plan_items for c in item["cluster"]})
        cluster_id_map = {old: 1 + idx for idx, old in enumerate(used_clusters)}
        
        print(f"üìä –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: {len(used_clusters)}")
        for old_id, new_id in cluster_id_map.items():
            cluster_files = [item for item in plan_items if old_id in item["cluster"]]
            print(f"   üìÅ –ü–∞–ø–∫–∞ {new_id}: {len(cluster_files)} —Ñ–∞–π–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_clustering_simple.py <–ø—É—Ç—å_–∫_–ø–∞–ø–∫–µ>")
        print("–ü—Ä–∏–º–µ—Ä: python test_clustering_simple.py /path/to/photos")
        sys.exit(1)
    
    folder_path = sys.argv[1]
    
    print("üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    if test_clustering_simple(folder_path):
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
        print("   - –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!")
        sys.exit(1)

if __name__ == "__main__":
    main()
