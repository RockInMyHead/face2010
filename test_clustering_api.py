#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
"""

import requests
import json
import time
import os
from pathlib import Path

def test_clustering_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    base_url = "http://localhost:8000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
    test_folder = Path("test_photos")
    test_folder.mkdir(exist_ok=True)
    
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞: {test_folder.absolute()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
    try:
        response = requests.get(f"{base_url}/api/folder", params={"path": str(test_folder.absolute())})
        if response.status_code == 200:
            folder_data = response.json()
            print(f"‚úÖ –ü–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {len(folder_data['folders'])} –ø–∞–ø–æ–∫, {len(folder_data['files'])} —Ñ–∞–π–ª–æ–≤")
            
            if len(folder_data['files']) == 0:
                print("‚ö†Ô∏è –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫—É test_photos/")
                return
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏: {e}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
    try:
        queue_data = {"path": str(test_folder.absolute())}
        response = requests.post(f"{base_url}/api/queue/add", json=queue_data, params={"includeExcluded": True})
        
        if response.status_code == 200:
            print("‚úÖ –ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {response.status_code} - {response.text}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    try:
        response = requests.post(f"{base_url}/api/queue/process", params={"includeExcluded": True})
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: {result['message']}")
            print(f"üìã ID –∑–∞–¥–∞—á: {result['task_ids']}")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            task_ids = result['task_ids']
            for task_id in task_ids:
                print(f"\nüîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É {task_id}...")
                
                for i in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                    try:
                        response = requests.get(f"{base_url}/api/tasks/{task_id}")
                        if response.status_code == 200:
                            task = response.json()
                            status = task['status']
                            progress = task['progress']
                            message = task['message']
                            
                            print(f"   üìä {status}: {progress}% - {message}")
                            
                            if status == "completed":
                                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                                if 'result' in task:
                                    result_data = task['result']
                                    print(f"   üìÅ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {result_data.get('clusters_count', 0)}")
                                    print(f"   üì§ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result_data.get('moved', 0)}")
                                    print(f"   üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result_data.get('copied', 0)}")
                                break
                            elif status == "error":
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {message}")
                                break
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                            break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
                        break
                    
                    time.sleep(1)
                else:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

if __name__ == "__main__":
    test_clustering_api()
