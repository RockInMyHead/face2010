#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (InsightFace) —Å –Ω–æ–≤—ã–º (face_recognition + DBSCAN + –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è).
"""

from pathlib import Path
from cluster import build_plan_live

def test_face_recognition_accuracy(test_folder_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    
    Args:
        test_folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –õ–ò–¶")
    print("=" * 80)
    print(f"\nüìÅ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞: {test_folder_path}\n")
    
    test_path = Path(test_folder_path)
    
    if not test_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {test_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = list(test_path.rglob("*"))
    image_count = len([p for p in images if p.suffix.lower() in {'.jpg', '.jpeg', '.png', '.bmp'}])
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
    print("\n" + "-" * 80)
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º...")
    print("-" * 80 + "\n")
    
    def progress_callback(message, percent=None):
        if percent:
            print(f"[{percent:3d}%] {message}")
        else:
            print(f"       {message}")
    
    try:
        result = build_plan_live(
            test_path,
            min_score=0.95,  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            min_cluster_size=1,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ
            min_samples=1,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
            progress_callback=progress_callback
        )
        
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò")
        print("=" * 80 + "\n")
        
        clusters = result.get("clusters", {})
        plan = result.get("plan", [])
        unreadable = result.get("unreadable", [])
        no_faces = result.get("no_faces", [])
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–ª—é–¥–µ–π): {len(clusters)}")
        print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(plan)}")
        print(f"‚ùå –ù–µ—á–∏—Ç–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(unreadable)}")
        print(f"üë§ –ë–µ–∑ –ª–∏—Ü: {len(no_faces)}")
        
        print("\n" + "-" * 80)
        print("üìã –î–ï–¢–ê–õ–ò –ö–õ–ê–°–¢–ï–†–û–í")
        print("-" * 80 + "\n")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–æ—Ç–æ
        sorted_clusters = sorted(clusters.items(), key=lambda x: len(x[1]), reverse=True)
        
        for cluster_id, paths in sorted_clusters[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            print(f"  –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {len(paths)} —Ñ–æ—Ç–æ")
            for path in list(paths)[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ
                print(f"    - {Path(path).name}")
            if len(paths) > 3:
                print(f"    ... –∏ –µ—â—ë {len(paths) - 3} —Ñ–æ—Ç–æ")
        
        if len(sorted_clusters) > 10:
            print(f"\n  ... –∏ –µ—â—ë {len(sorted_clusters) - 10} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ
        single_photo_clusters = [c for c in clusters.values() if len(c) == 1]
        print(f"\nüìÅ –û–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏): {len(single_photo_clusters)}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("\n" + "=" * 80)
        print("üìà –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê")
        print("=" * 80 + "\n")
        
        coverage = (len(plan) / max(image_count, 1)) * 100
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}% ({len(plan)}/{image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        
        if len(no_faces) > 0:
            print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ª–∏—Ü: {len(no_faces)}")
            for path in no_faces[:5]:
                print(f"    - {Path(path).name}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80 + "\n")
        
        print("üí° –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        print("  ‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è face_recognition —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 99.38% (LFW)")
        print("  ‚úì CNN –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("  ‚úì DBSCAN —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º epsilon –≤–º–µ—Å—Ç–æ HDBSCAN")
        print("  ‚úì –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        print("  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∫–∞–∂–¥–∞—è –≤ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ)")
        print("  ‚úì Euclidean distance –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è face_recognition\n")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        test_folder = sys.argv[1]
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        test_folder = "/Users/artembutko/Desktop"
        print(f"‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {test_folder}")
        print(f"‚ÑπÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–∏: python test_accuracy.py /path/to/folder\n")
    
    test_face_recognition_accuracy(test_folder)

