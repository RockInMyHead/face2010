#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞–ø–æ–∫
"""

import os
import sys
import time
import uuid
import zipfile
import tempfile
import asyncio
import re
from pathlib import Path
from typing import List, Dict, Optional
from fastapi import FastAPI, HTTPException, UploadFile, File, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
import psutil
from PIL import Image, ImageOps
from io import BytesIO

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
from cluster_improved import build_plan_live, distribute_to_folders, process_group_folder, IMG_EXTS

app = FastAPI(title="FaceSort API", version="2.0")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_state = {
    "queue": [],
    "current_tasks": {}
}

class QueueItem(BaseModel):
    path: str

class ProcessingResult(BaseModel):
    moved: int
    copied: int
    clusters_count: int
    unreadable_count: int
    no_faces_count: int
    unreadable_files: List[str]
    no_faces_files: List[str]

def cleanup_old_tasks():
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏"""
    current_time = time.time()
    tasks_to_remove = []
    
    for task_id, task in app_state["current_tasks"].items():
        if task["status"] in ["completed", "error"]:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            if current_time - task["created_at"] > 300:  # 5 –º–∏–Ω—É—Ç
                tasks_to_remove.append(task_id)
    
    for task_id in tasks_to_remove:
        del app_state["current_tasks"][task_id]

def get_logical_drives():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∏—Å–∫–æ–≤"""
    return [Path(p.mountpoint) for p in psutil.disk_partitions(all=False) if Path(p.mountpoint).exists()]

def get_special_dirs():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    home = Path.home()
    return {
        "üíº –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª": home / "Desktop",
        "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã": home / "Documents", 
        "üì• –ó–∞–≥—Ä—É–∑–∫–∏": home / "Downloads",
        "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": home / "Pictures",
    }

def count_images_in_dir(path: Path) -> int:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        return len([f for f in path.iterdir() if f.is_file() and f.suffix.lower() in IMG_EXTS])
    except:
        return 0

class FolderInfo(BaseModel):
    name: str
    path: str
    image_count: int
    is_dir: bool

async def process_folder_task(task_id: str, folder_path: str, include_excluded: bool = False):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîç [TASK] process_folder_task –∑–∞–ø—É—â–µ–Ω–∞: task_id={task_id}, folder_path={folder_path}, include_excluded={include_excluded}")
    
    try:
        import sys
        sys.stdout.flush()
        
        print(f"üîç [TASK] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ 'running'")
        app_state["current_tasks"][task_id]["status"] = "running"
        app_state["current_tasks"][task_id]["message"] = "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        app_state["current_tasks"][task_id]["progress"] = 5
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        await asyncio.sleep(2)
        app_state["current_tasks"][task_id]["progress"] = 10
        app_state["current_tasks"][task_id]["message"] = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        
        await asyncio.sleep(2)
        app_state["current_tasks"][task_id]["progress"] = 25
        app_state["current_tasks"][task_id]["message"] = "–ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏—Ü–∞..."
        
        await asyncio.sleep(2)
        app_state["current_tasks"][task_id]["progress"] = 50
        app_state["current_tasks"][task_id]["message"] = "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –ª–∏—Ü–∞..."
        
        print(f"üîç [TASK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {folder_path}")
        path = Path(folder_path)
        if not path.exists():
            print(f"‚ùå [TASK] –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            raise Exception("–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"‚úÖ [TASK] –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        excluded_names = ["–æ–±—â–∏–µ", "–æ–±—â–∞—è", "common", "shared", "–≤—Å–µ", "all", "mixed", "—Å–º–µ—à–∞–Ω–Ω—ã–µ"]
        
        # –ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
        if not include_excluded:
            folder_name_lower = str(path).lower()
            for excluded_name in excluded_names:
                if excluded_name in folder_name_lower:
                    raise Exception(f"–ü–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{excluded_name}' –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –≥—Ä—É–ø–ø–æ–≤–∞—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        subdirs_with_images = []
        for p in path.iterdir():
            if p.is_dir() and not any(excluded_name in str(p).lower() for excluded_name in excluded_names):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∞–ø–∫–µ
                has_images = any(f.suffix.lower() in IMG_EXTS for f in p.rglob("*") if f.is_file())
                if has_images:
                    subdirs_with_images.append(p)
        
        print(f"üîç [TASK] –ù–∞–π–¥–µ–Ω–æ {len(subdirs_with_images)} –ø–æ–¥–ø–∞–ø–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        if include_excluded:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—â–∏—Ö –ø–∞–ø–æ–∫, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω
            def group_progress_callback(progress_text: str, percent: int = None):
                if task_id in app_state["current_tasks"]:
                    app_state["current_tasks"][task_id]["message"] = progress_text
                    if percent is not None:
                        app_state["current_tasks"][task_id]["progress"] = percent
                    else:
                        try:
                            if "%" in progress_text:
                                match = re.search(r'(\d+)%', progress_text)
                                if match:
                                    app_state["current_tasks"][task_id]["progress"] = int(match.group(1))
                        except:
                            pass

            app_state["current_tasks"][task_id]["message"] = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏..."
            app_state["current_tasks"][task_id]["progress"] = 10
            created_clusters = process_group_folder(path, progress_callback=group_progress_callback, include_excluded=True)
            result = ProcessingResult(
                moved=0, copied=0, clusters_count=created_clusters,
                unreadable_count=0, no_faces_count=0,
                unreadable_files=[], no_faces_files=[]
            )
        elif len(subdirs_with_images) > 1:
            # –ì—Ä—É–ø–ø–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            def group_progress_callback(progress_text: str, percent: int = None):
                if task_id in app_state["current_tasks"]:
                    app_state["current_tasks"][task_id]["message"] = progress_text
                    if percent is not None:
                        app_state["current_tasks"][task_id]["progress"] = percent
                    else:
                        try:
                            if "%" in progress_text:
                                match = re.search(r'(\d+)%', progress_text)
                                if match:
                                    app_state["current_tasks"][task_id]["progress"] = int(match.group(1))
                        except:
                            pass
            
            app_state["current_tasks"][task_id]["message"] = "–ì—Ä—É–ø–ø–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫..."
            app_state["current_tasks"][task_id]["progress"] = 10
            
            created_clusters = process_group_folder(path, progress_callback=group_progress_callback, include_excluded=include_excluded)
            result = ProcessingResult(
                moved=0, copied=0, clusters_count=created_clusters,
                unreadable_count=0, no_faces_count=0,
                unreadable_files=[], no_faces_files=[]
            )
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
            def progress_callback(progress_text: str, percent: int = None):
                if task_id in app_state["current_tasks"]:
                    app_state["current_tasks"][task_id]["message"] = progress_text
                    if percent is not None:
                        app_state["current_tasks"][task_id]["progress"] = percent
                    else:
                        try:
                            if "%" in progress_text:
                                match = re.search(r'(\d+)%', progress_text)
                                if match:
                                    app_state["current_tasks"][task_id]["progress"] = int(match.group(1))
                        except:
                            pass

            app_state["current_tasks"][task_id]["message"] = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏..."
            app_state["current_tasks"][task_id]["progress"] = 10
            
            # –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
            plan = build_plan_live(path, progress_callback=progress_callback, include_excluded=include_excluded)
            
            if len(plan.get("clusters", {})) == 0:
                print(f"‚ùå [TASK] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è {path}")
                app_state["current_tasks"][task_id]["status"] = "error"
                app_state["current_tasks"][task_id]["message"] = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã"
                app_state["current_tasks"][task_id]["progress"] = 100
                return
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
            moved, copied, _ = distribute_to_folders(plan, path, progress_callback=progress_callback)
            
            result = ProcessingResult(
                moved=moved, copied=copied, clusters_count=len(plan.get("clusters", {})),
                unreadable_count=len(plan.get("unreadable", [])), 
                no_faces_count=len(plan.get("no_faces", [])),
                unreadable_files=plan.get("unreadable", []),
                no_faces_files=plan.get("no_faces", [])
            )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        app_state["current_tasks"][task_id]["status"] = "completed"
        app_state["current_tasks"][task_id]["message"] = f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ {result.clusters_count} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"
        app_state["current_tasks"][task_id]["progress"] = 100
        app_state["current_tasks"][task_id]["result"] = result.dict()
        
        print(f"‚úÖ [TASK] –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä [TASK] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.clusters_count} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, {result.moved} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ, {result.copied} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå [TASK] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
        import traceback
        traceback.print_exc()
        
        app_state["current_tasks"][task_id]["status"] = "error"
        app_state["current_tasks"][task_id]["message"] = f"–û—à–∏–±–∫–∞: {str(e)}"
        app_state["current_tasks"][task_id]["progress"] = 100

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse("static/index.html")

@app.get("/api/drives")
async def get_drives():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫"""
    drives = get_logical_drives()
    special_dirs = get_special_dirs()
    
    result = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫–∏
    for drive in drives:
        try:
            image_count = count_images_in_dir(drive)
            result.append(FolderInfo(
                name=f"üíΩ {drive.name}",
                path=str(drive),
                image_count=image_count,
                is_dir=True
            ))
        except:
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
    for name, path in special_dirs.items():
        if path.exists():
            try:
                image_count = count_images_in_dir(path)
                result.append(FolderInfo(
                    name=name,
                    path=str(path),
                    image_count=image_count,
                    is_dir=True
                ))
            except:
                pass
    
    return {"folders": result}

@app.get("/api/folder")
async def get_folder_contents(path: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"""
    folder_path = Path(path)
    if not folder_path.exists() or not folder_path.is_dir():
        raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    folders = []
    files = []
    
    try:
        for item in folder_path.iterdir():
            if item.is_dir():
                try:
                    image_count = count_images_in_dir(item)
                    folders.append(FolderInfo(
                        name=item.name,
                        path=str(item),
                        image_count=image_count,
                        is_dir=True
                    ))
                except:
                    folders.append(FolderInfo(
                        name=item.name,
                        path=str(item),
                        image_count=0,
                        is_dir=True
                    ))
            elif item.suffix.lower() in IMG_EXTS:
                files.append(FolderInfo(
                    name=item.name,
                    path=str(item),
                    image_count=1,
                    is_dir=False
                ))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")
    
    return {"folders": folders, "files": files}

@app.post("/api/upload")
async def upload_files(
    path: str,
    files: List[UploadFile] = File(...)
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    target_dir = Path(path)
    if not target_dir.exists():
        raise HTTPException(status_code=404, detail="–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    results = []
    
    for file in files:
        try:
            if file.filename.endswith(".zip"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP –∞—Ä—Ö–∏–≤–∞
                temp_zip = target_dir / f"temp_{uuid.uuid4().hex}.zip"
                with open(temp_zip, "wb") as f:
                    content = await file.read()
                    f.write(content)
                
                with zipfile.ZipFile(temp_zip) as archive:
                    archive.extractall(target_dir)
                
                temp_zip.unlink()
                results.append({"filename": file.filename, "status": "extracted"})
            else:
                # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
                file_path = target_dir / file.filename
                with open(file_path, "wb") as f:
                    content = await file.read()
                    f.write(content)
                results.append({"filename": file.filename, "status": "uploaded"})
                
        except Exception as e:
            results.append({"filename": file.filename, "status": "error", "error": str(e)})
    
    return {"results": results}

@app.get("/api/queue")
async def get_queue():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return {"queue": app_state["queue"]}

@app.post("/api/queue/add")
async def add_to_queue(item: QueueItem, includeExcluded: bool = False):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å"""
    print(f"üîç [API] add_to_queue –≤—ã–∑–≤–∞–Ω: path={item.path}, includeExcluded={includeExcluded}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –æ–±—â–∏–µ
    if not includeExcluded:
        excluded_names = ["–æ–±—â–∏–µ", "–æ–±—â–∞—è", "common", "shared", "–≤—Å–µ", "all", "mixed", "—Å–º–µ—à–∞–Ω–Ω—ã–µ"]
        folder_name_lower = str(item.path).lower()
        for excluded_name in excluded_names:
            if excluded_name in folder_name_lower:
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ü–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{excluded_name}' –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –í–∫–ª—é—á–∏—Ç–µ —Ñ–ª–∞–≥ 'includeExcluded' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–∏—Ö –ø–∞–ø–æ–∫."
                )
    
    if item.path not in app_state["queue"]:
        app_state["queue"].append(item.path)
        print(f"‚úÖ [API] –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {item.path}")
    else:
        print(f"‚ö†Ô∏è [API] –ü–∞–ø–∫–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: {item.path}")
    
    return {"message": "–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å", "queue": app_state["queue"]}

@app.post("/api/queue/clear")
async def clear_queue():
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"""
    app_state["queue"].clear()
    return {"message": "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞"}

@app.post("/api/queue/process")
async def process_queue(background_tasks: BackgroundTasks, includeExcluded: bool = False):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏"""
    print(f"üîç [API] process_queue –≤—ã–∑–≤–∞–Ω: includeExcluded={includeExcluded}")
    print(f"üîç [API] –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: {app_state['queue']}")
    
    if not app_state["queue"]:
        print("‚ùå [API] –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        raise HTTPException(status_code=400, detail="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
    
    task_ids = []
    print(f"üîç [API] –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è {len(app_state['queue'])} –ø–∞–ø–æ–∫")
    
    for folder_path in app_state["queue"]:
        task_id = str(uuid.uuid4())
        print(f"üîç [API] –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É {task_id} –¥–ª—è –ø–∞–ø–∫–∏: {folder_path}")
        
        app_state["current_tasks"][task_id] = {
            "task_id": task_id,
            "status": "pending",
            "progress": 0,
            "message": "–í –æ—á–µ—Ä–µ–¥–∏...",
            "folder_path": folder_path,
            "created_at": time.time(),
            "include_excluded": includeExcluded
        }
        
        print(f"üîç [API] –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: {task_id}")
        background_tasks.add_task(process_folder_task, task_id, folder_path, includeExcluded)
        task_ids.append(task_id)
    
    print(f"üîç [API] –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å, —Å–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á")
    app_state["queue"].clear()
    
    result = {"message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", "task_ids": task_ids}
    print(f"‚úÖ [API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result

@app.get("/api/tasks")
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    cleanup_old_tasks()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    return {"tasks": list(app_state["current_tasks"].values())}

@app.get("/api/tasks/{task_id}")
async def get_task(task_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    if task_id not in app_state["current_tasks"]:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return app_state["current_tasks"][task_id]

@app.post("/api/tasks/clear")
async def clear_completed_tasks():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    tasks_to_remove = []
    
    for task_id, task in app_state["current_tasks"].items():
        if task["status"] in ["completed", "error"]:
            tasks_to_remove.append(task_id)
    
    for task_id in tasks_to_remove:
        del app_state["current_tasks"][task_id]
    
    return {"message": f"–û—á–∏—â–µ–Ω–æ {len(tasks_to_remove)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"}

@app.get("/api/image/preview")
async def get_image_preview(path: str, size: int = 150):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_path = Path(path)
    if not img_path.exists() or img_path.suffix.lower() not in IMG_EXTS:
        raise HTTPException(status_code=404, detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤ –ø–∞–º—è—Ç–∏
        with Image.open(img_path) as img:
            img = img.convert("RGB")
            img = ImageOps.fit(img, (size, size), Image.Resampling.LANCZOS)
            buf = BytesIO()
            img.save(buf, format="JPEG", quality=85)
            buf.seek(0)
            from fastapi.responses import StreamingResponse
            return StreamingResponse(buf, media_type="image/jpeg")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}")

@app.get("/api/zip")
async def zip_folder(path: str):
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª"""
    folder = Path(path)
    if not folder.exists() or not folder.is_dir():
        raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª
    tmp_dir = tempfile.gettempdir()
    zip_name = f"{uuid.uuid4()}.zip"
    zip_path = Path(tmp_dir) / zip_name
    # –î–µ–ª–∞–µ—Ç –∞—Ä—Ö–∏–≤
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in folder.rglob('*'):
            if file_path.is_file():
                arcname = file_path.relative_to(folder)
                zipf.write(file_path, arcname)
    
    return FileResponse(
        path=str(zip_path),
        filename=f"{folder.name}.zip",
        media_type="application/zip"
    )

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ FaceSort API v2.0 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
