"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""
import os
import asyncio
import concurrent.futures
import uuid
import time
import tempfile
import re
from io import BytesIO
from pathlib import Path
from typing import Dict, List, Optional
import unicodedata

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, Response
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import cv2
import numpy as np
from PIL import Image

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
from cluster_simple import build_plan_simple as build_plan_advanced, distribute_to_folders, process_group_folder, IMG_EXTS

app = FastAPI(title="–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ª–∏—Ü", description="API –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º")
executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

# CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_state = {
    "queue": [],
    "current_tasks": {},
    "results": {}
}

class QueueItem(BaseModel):
    path: str
    includeExcluded: bool = False

class TaskResult(BaseModel):
    task_id: str
    status: str
    progress: int
    message: str
    result: Optional[Dict] = None
    error: Optional[str] = None

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return HTMLResponse(content=open("static/index.html", "r", encoding="utf-8").read())

@app.get("/api/drives")
async def get_drives():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤."""
    import platform
    drives = []
    
    if platform.system() == "Darwin":  # macOS
        drives = [
            {"name": "üè† –î–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞", "path": str(Path.home())},
            {"name": "üìÅ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª", "path": str(Path.home() / "Desktop")},
            {"name": "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "path": str(Path.home() / "Pictures")},
            {"name": "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "path": str(Path.home() / "Documents")},
            {"name": "üíæ –ó–∞–≥—Ä—É–∑–∫–∏", "path": str(Path.home() / "Downloads")}
        ]
    elif platform.system() == "Windows":
        import string
        drives = [{"name": f"üíæ –î–∏—Å–∫ {d}:", "path": f"{d}:\\"} for d in string.ascii_uppercase if Path(f"{d}:\\").exists()]
    else:  # Linux
        drives = [
            {"name": "üè† –î–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞", "path": str(Path.home())},
            {"name": "üìÅ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª", "path": str(Path.home() / "Desktop")},
            {"name": "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "path": str(Path.home() / "Pictures")},
            {"name": "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "path": str(Path.home() / "Documents")},
            {"name": "üíæ –ó–∞–≥—Ä—É–∑–∫–∏", "path": str(Path.home() / "Downloads")}
        ]
    
    return {"drives": drives}

@app.get("/api/folder")
async def get_folder_contents(path: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏."""
    try:
        folder_path = Path(path)
        if not folder_path.exists() or not folder_path.is_dir():
            raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        folders = []
        images = []
        
        for item in sorted(folder_path.iterdir()):
            if item.is_dir():
                folders.append({
                    "name": item.name,
                    "path": str(item),
                    "type": "folder"
                })
            elif item.is_file() and item.suffix.lower() in IMG_EXTS:
                images.append({
                    "name": item.name,
                    "path": str(item),
                    "type": "image"
                })
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        contents = []
        for f in folders:
            contents.append({"name": f["name"], "path": f["path"], "is_directory": True})
        for i in images:
            contents.append({"name": i["name"], "path": i["path"], "is_directory": False})
        
        return {
            "path": str(folder_path),
            "folders": folders,
            "images": images,
            "contents": contents
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/queue")
async def get_queue():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å."""
    return {"queue": app_state["queue"]}

@app.post("/api/queue/add")
async def add_to_queue(item: QueueItem):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É –≤ –æ—á–µ—Ä–µ–¥—å."""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
    normalized_path = unicodedata.normalize('NFKC', item.path)
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    normalized_path = normalized_path.replace('\u00A0', ' ').replace('\xa0', ' ')
    
    if normalized_path not in app_state["queue"]:
        app_state["queue"].append(normalized_path)
        return {"message": f"–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {normalized_path}"}
    else:
        return {"message": f"–ü–∞–ø–∫–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: {normalized_path}"}

@app.delete("/api/queue/clear")
async def clear_queue():
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å."""
    app_state["queue"] = []
    return {"message": "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞"}

@app.post("/api/process")
async def process_queue(includeExcluded: bool = False, background_tasks: BackgroundTasks = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å."""
    if not app_state["queue"]:
        raise HTTPException(status_code=400, detail="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
    
    task_ids = []
    for folder_path in app_state["queue"]:
        task_id = str(uuid.uuid4())
        task_ids.append(task_id)
        
        app_state["current_tasks"][task_id] = {
            "status": "running",
            "progress": 0,
            "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "folder_path": folder_path,
            "include_excluded": includeExcluded
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(process_folder_task, task_id, folder_path, includeExcluded)
    
    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    app_state["queue"] = []
    
    return {"message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", "task_ids": task_ids}

async def process_folder_task(task_id: str, folder_path: str, include_excluded: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É."""
    try:
        print(f"üöÄ [TASK] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: {folder_path}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        normalized_path = unicodedata.normalize('NFKC', folder_path)
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        normalized_path = normalized_path.replace('\u00A0', ' ').replace('\xa0', ' ')
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –≤—Å–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
        if not Path(normalized_path).exists():
            parent_dir = Path(normalized_path).parent
            if parent_dir.exists():
                for item in parent_dir.iterdir():
                    if item.is_dir() and '116_–î–∞—à–∞' in item.name:
                        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {item.name}")
                        normalized_path = str(item)
                        break
        path = Path(normalized_path)
        
        if not path.exists():
            app_state["current_tasks"][task_id]["status"] = "error"
            app_state["current_tasks"][task_id]["error"] = f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}"
            return
        
        def progress_callback(message: str, progress: int):
            if isinstance(progress, (int, float)):
                app_state["current_tasks"][task_id]["progress"] = min(100, max(0, int(progress)))
            app_state["current_tasks"][task_id]["message"] = message
            print(f"üìä [TASK] {message}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
        loop = asyncio.get_event_loop()
        plan = await loop.run_in_executor(
            executor,
            build_plan_advanced,
            path,
            3,  # n_clusters
            progress_callback
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not isinstance(plan, dict):
            app_state["current_tasks"][task_id]["status"] = "completed"
            app_state["current_tasks"][task_id]["progress"] = 100
            app_state["current_tasks"][task_id]["message"] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            return
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–ø–∫–∞–º
        progress_callback("üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º...", 90)
        
        moved, copied, final_cluster = await loop.run_in_executor(
            executor,
            distribute_to_folders,
            plan,
            path,
            1,
            progress_callback
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        app_state["current_tasks"][task_id]["status"] = "completed"
        app_state["current_tasks"][task_id]["progress"] = 100
        app_state["current_tasks"][task_id]["message"] = f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved}, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied}"
        app_state["current_tasks"][task_id]["result"] = {
            "moved": moved,
            "copied": copied,
            "clusters": final_cluster - 1
        }
        
        print(f"‚úÖ [TASK] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {folder_path}")
        
    except Exception as e:
        print(f"‚ùå [TASK] –û—à–∏–±–∫–∞: {e}")
        app_state["current_tasks"][task_id]["status"] = "error"
        app_state["current_tasks"][task_id]["error"] = str(e)

@app.get("/api/tasks")
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    return {"tasks": list(app_state["current_tasks"].values())}

@app.delete("/api/tasks/clear")
async def clear_completed_tasks():
    """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    completed_tasks = [tid for tid, task in app_state["current_tasks"].items() 
                      if task["status"] in ["completed", "error"]]
    for tid in completed_tasks:
        del app_state["current_tasks"][tid]
    return {"message": f"–£–¥–∞–ª–µ–Ω–æ {len(completed_tasks)} –∑–∞–¥–∞—á"}

@app.get("/api/image/preview")
async def get_image_preview(path: str, size: int = 150):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        # URL –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
        import urllib.parse
        decoded_path = urllib.parse.unquote(path)
        
        image_path = Path(decoded_path)
        if not image_path.exists() or not image_path.is_file():
            raise HTTPException(status_code=404, detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image_path.suffix.lower() not in IMG_EXTS:
            raise HTTPException(status_code=400, detail="–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = cv2.imread(str(image_path))
        if img is None:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        height, width = img.shape[:2]
        if width > height:
            new_width = size
            new_height = int(height * size / width)
        else:
            new_height = size
            new_width = int(width * size / height)
        
        resized = cv2.resize(img, (new_width, new_height))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –∏ –∑–∞—Ç–µ–º –≤ JPEG
        rgb_img = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)
        pil_img = Image.fromarray(rgb_img)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        img_bytes = BytesIO()
        pil_img.save(img_bytes, format='JPEG', quality=85)
        img_bytes.seek(0)
        
        return Response(
            content=img_bytes.getvalue(),
            media_type="image/jpeg",
            headers={"Cache-Control": "public, max-age=3600"}
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
