"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
"""
import sys
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from cluster_advanced import (
            build_plan_advanced, 
            AdvancedFaceRecognition,
            k_reciprocal_rerank,
            spectral_clustering_with_validation
        )
        print("  ‚úÖ –ò–º–ø–æ—Ä—Ç cluster_advanced —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ cluster_advanced: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ InsightFace
    try:
        from insightface.app import FaceAnalysis
        print("  ‚úÖ InsightFace –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ö†Ô∏è  InsightFace –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("     –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install insightface onnxruntime")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ scikit-learn
    try:
        from sklearn.cluster import SpectralClustering
        print("  ‚úÖ scikit-learn –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def test_recognizer_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    
    try:
        from cluster_advanced import AdvancedFaceRecognition
        
        recognizer = AdvancedFaceRecognition(
            use_gpu=False,
            min_face_size=20,
            confidence_threshold=0.9
        )
        
        if recognizer.detector_type == 'insightface':
            print("  ‚úÖ InsightFace –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        else:
            print("  ‚ö†Ô∏è  InsightFace –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_quality_assessment():
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\nüß™ –¢–µ—Å—Ç 3: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        import numpy as np
        from cluster_advanced import calculate_blur_score, calculate_face_quality
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        
        # –¢–µ—Å—Ç blur score
        blur = calculate_blur_score(test_img)
        print(f"  ‚úÖ Blur score: {blur:.2f}")
        
        # –¢–µ—Å—Ç quality score
        quality = calculate_face_quality(test_img, bbox=(0, 0, 100, 100))
        print(f"  ‚úÖ Quality score: {quality:.3f}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

def test_k_reciprocal():
    """–¢–µ—Å—Ç k-reciprocal re-ranking"""
    print("\nüß™ –¢–µ—Å—Ç 4: k-reciprocal re-ranking...")
    
    try:
        import numpy as np
        from cluster_advanced import k_reciprocal_rerank
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É —Å—Ö–æ–¥—Å—Ç–≤–∞
        similarity = np.array([
            [1.0, 0.8, 0.3, 0.2],
            [0.8, 1.0, 0.4, 0.1],
            [0.3, 0.4, 1.0, 0.9],
            [0.2, 0.1, 0.9, 1.0]
        ])
        
        reranked = k_reciprocal_rerank(similarity, k=2)
        
        print(f"  ‚úÖ Re-ranking –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"     –û—Ä–∏–≥–∏–Ω–∞–ª [0,1]: {similarity[0,1]:.3f}")
        print(f"     Re-ranked [0,1]: {reranked[0,1]:.3f}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ re-ranking: {e}")
        return False

def test_spectral_clustering():
    """–¢–µ—Å—Ç spectral clustering"""
    print("\nüß™ –¢–µ—Å—Ç 5: Spectral Clustering...")
    
    try:
        import numpy as np
        from sklearn.preprocessing import normalize
        from cluster_advanced import spectral_clustering_with_validation
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (3 –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ 5 —Ç–æ—á–µ–∫)
        np.random.seed(42)
        cluster1 = np.random.randn(5, 128) + np.array([1, 0] + [0]*126)
        cluster2 = np.random.randn(5, 128) + np.array([0, 1] + [0]*126)
        cluster3 = np.random.randn(5, 128) + np.array([-1, -1] + [0]*126)
        
        embeddings = np.vstack([cluster1, cluster2, cluster3])
        embeddings = normalize(embeddings, norm='l2')
        
        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        labels = spectral_clustering_with_validation(
            embeddings=[e for e in embeddings],
            n_clusters=3,
            k_reciprocal=2,
            verification_threshold=0.5
        )
        
        unique_labels = len(set(labels) - {-1})
        print(f"  ‚úÖ Clustering –∑–∞–≤–µ—Ä—à–µ–Ω: {unique_labels} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ clustering: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å main.py...")
    
    try:
        import os
        import importlib.util
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º main.py
        spec = importlib.util.spec_from_file_location("main", "main.py")
        main_module = importlib.util.module_from_spec(spec)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        spec.loader.exec_module(main_module)
        
        if hasattr(main_module, 'USE_ADVANCED_CLUSTERING'):
            print(f"  ‚úÖ USE_ADVANCED_CLUSTERING: {main_module.USE_ADVANCED_CLUSTERING}")
        else:
            print("  ‚ùå USE_ADVANCED_CLUSTERING –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        if hasattr(main_module, 'ADVANCED_AVAILABLE'):
            print(f"  ‚úÖ ADVANCED_AVAILABLE: {main_module.ADVANCED_AVAILABLE}")
        else:
            print("  ‚ùå ADVANCED_AVAILABLE –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_recognizer_init),
        ("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", test_quality_assessment),
        ("k-reciprocal", test_k_reciprocal),
        ("Spectral Clustering", test_spectral_clustering),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_integration)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, r in results if r)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status}: {name}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    print("=" * 60)
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π:")
        print("   export USE_ADVANCED_CLUSTERING=true")
        print("   python main.py")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install -r requirements-advanced.txt")
        return 1

if __name__ == "__main__":
    sys.exit(main())

